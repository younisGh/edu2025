extend type Query {
  """
  ✨ Look up a single `Resource` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  resource(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Resource_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Resource_FirstRow
  ): Resource @fdc_generated(from: "Resource", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Review` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  review(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Review_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Review_FirstRow
  ): Review @fdc_generated(from: "Review", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Session` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  session(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Session_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Session_FirstRow
  ): Session @fdc_generated(from: "Session", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Subject` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  subject(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Subject_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Subject_FirstRow
  ): Subject @fdc_generated(from: "Subject", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `TutorProfile` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  tutorProfile(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: TutorProfile_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: TutorProfile_FirstRow
  ): TutorProfile @fdc_generated(from: "TutorProfile", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `TutorSubject` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  tutorSubject(
    """
    The key used to identify the object.
    """
    key: TutorSubject_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: TutorSubject_FirstRow
  ): TutorSubject @fdc_generated(from: "TutorSubject", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `User` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  user(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User @fdc_generated(from: "User", purpose: QUERY_SINGLE)
  """
  ✨ List `Resource` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  resources(
    """
    Filter condition to narrow down the query results.
    """
    where: Resource_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Resource_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Resource_Having
  ): [Resource!]! @fdc_generated(from: "Resource", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Review` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  reviews(
    """
    Filter condition to narrow down the query results.
    """
    where: Review_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Review_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Review_Having
  ): [Review!]! @fdc_generated(from: "Review", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Session` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  sessions(
    """
    Filter condition to narrow down the query results.
    """
    where: Session_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Session_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Session_Having
  ): [Session!]! @fdc_generated(from: "Session", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Subject` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  subjects(
    """
    Filter condition to narrow down the query results.
    """
    where: Subject_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Subject_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Subject_Having
  ): [Subject!]! @fdc_generated(from: "Subject", purpose: QUERY_MULTIPLE)
  """
  ✨ List `TutorProfile` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  tutorProfiles(
    """
    Filter condition to narrow down the query results.
    """
    where: TutorProfile_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [TutorProfile_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: TutorProfile_Having
  ): [TutorProfile!]! @fdc_generated(from: "TutorProfile", purpose: QUERY_MULTIPLE)
  """
  ✨ List `TutorSubject` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  tutorSubjects(
    """
    Filter condition to narrow down the query results.
    """
    where: TutorSubject_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [TutorSubject_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: TutorSubject_Having
  ): [TutorSubject!]! @fdc_generated(from: "TutorSubject", purpose: QUERY_MULTIPLE)
  """
  ✨ List `User` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  users(
    """
    Filter condition to narrow down the query results.
    """
    where: User_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [User_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: User_Having
  ): [User!]! @fdc_generated(from: "User", purpose: QUERY_MULTIPLE)
}
